commit 14e8f9da7ecc925c93f5c8cc4fd47fda44d1c82f
Author: Joachim Nilsson <troglobit@gmail.com>
Date:   Thu Jul 5 23:51:23 2018 +0200

    If supervisor script returns OK (0), deregister process and continue
    
    This patch adds support for the disarming, of sorts, of a triggered
    supervisor event.  When a supervisor script is used, the script can
    now return 0 to acknowledge and thereby disable the supervision of
    an offending process.
    
    E.g., a process suddenly misses a deadline.  The supervisor script can
    be used to extend the functionality of watchdogd to, for example, try to
    restart the process instead of reset the whole system.  When the script
    returns zero watchdogd continues operating as per usual.
    
    Or, instead of restarting the process, the script can write to a GPIO to
    pull an external reset pin and then return non-zero to let watchdogd
    save reset cause and reboot the CPU.
    
    Signed-off-by: Joachim Nilsson <troglobit@gmail.com>

diff --git a/src/supervisor.c b/src/supervisor.c
index f76c14d..e66cae5 100644
--- a/src/supervisor.c
+++ b/src/supervisor.c
@@ -64,12 +64,31 @@ static struct supervisor *find_supervised(pid_t pid)
 	return NULL;
 }
 
+static void release(struct supervisor *p)
+{
+	uev_timer_stop(&p->watcher);
+	memset(p, 0, sizeof(*p));
+	p->id = -1;
+}
+
 static int action(uev_ctx_t *ctx, struct supervisor *p, wdog_cause_t c, int timeout)
 {
 	wdog_reason_t reason;
 
-	if (exec && !access(exec, X_OK) && !supervisor_exec(exec, c, p->pid, p->label))
-		return 0;
+	if (exec && !access(exec, X_OK)) {
+		int rc;
+
+		/*
+		 * If script returns OK we expect it to have dealt with
+		 * the situation properly.  So we remove this process
+		 * from our supervision and go about our business.
+		 */
+		rc = supervisor_exec(exec, c, p->pid, p->label);
+		if (!rc) {
+			release(p);
+			return 0;
+		}
+	}
 
 	memset(&reason, 0, sizeof(reason));
 	reason.wid = p->id;
@@ -192,12 +211,6 @@ static struct supervisor *allocate(pid_t pid, char *label, unsigned int timeout)
 	return p;
 }
 
-static void release(struct supervisor *p)
-{
-	memset(p, 0, sizeof(*p));
-	p->id = -1;
-}
-
 /*
  * Validate user's kick/unsubscribe against our records
  *
@@ -295,7 +308,6 @@ int supervisor_cmd(uev_ctx_t *ctx, wdog_t *req)
 			req->cmd   = WDOG_CMD_ERROR;
 			req->error = errno;
 		} else {
-			uev_timer_stop(&p->watcher);
 			release(p);
 			DEBUG("Goodbye %s[%d] id:%d.", req->label, req->pid, req->id);
 		}
